#!/usr/bin/env node
import {b as b$1,a as a$1}from'./chunk-WWWGMODU.js';import {a,L as L$1,O,W,r,c,Q,M,o,h,p as p$1,s,i,_ as _$1,aa,f,g,d,e,q as q$1,m,K as K$1,b,Z,da,ba,ea,H,J,N,fa,P,j,$,G,n,U,l,R,k,I,S,D as D$1,F as F$1,E,T}from'./chunk-CTA6CCSY.js';export{da as fetchTree,ea as getItemTargetPath,Y as getRegistriesConfig,V as getRegistry,ba as getRegistryBaseColor,aa as getRegistryBaseColors,$ as getRegistryIcons,W as getRegistryItems,_ as getRegistryStyles,Z as getShadcnRegistryIndex,X as resolveRegistryItems,ca as resolveTree}from'./chunk-CTA6CCSY.js';import {p,h as h$1,g as g$1}from'./chunk-TGLVS3JU.js';import*as D from'path';import D__default,{join}from'path';import {promises,existsSync}from'fs';import K from'fs-extra';import x from'postcss';import $r from'postcss/lib/at-rule';import He,{z}from'zod';import {execa}from'execa';import Ge from'prompts';import ri,{tmpdir}from'os';import {SyntaxKind,Project,ScriptKind}from'ts-morph';import {Command}from'commander';import ui from'deepmerge';import*as L from'fs/promises';import L__default from'fs/promises';import {diffLines}from'diff';import {StdioServerTransport}from'@modelcontextprotocol/sdk/server/stdio.js';import {randomBytes}from'crypto';import Wi from'fast-glob';async function Ot(t){let e={};if(!K.existsSync(t.cwd)||!K.existsSync(D__default.resolve(t.cwd,"package.json")))return e["1"]=true,{errors:e,projectInfo:null};let r$1=s("Preflight checks.",{silent:t.silent}).start();K.existsSync(D__default.resolve(t.cwd,"components.json"))&&!t.force&&(r$1?.fail(),r.break(),r.error(`A ${c.info("components.json")} file already exists at ${c.info(t.cwd)}.
To start over, remove the ${c.info("components.json")} file and run ${c.info("init")} again.`),r.break(),process.exit(1)),r$1?.succeed();let i=s("Verifying framework.",{silent:t.silent}).start(),o$1=await o(t.cwd);(!o$1||o$1?.framework.name==="manual")&&(e["7"]=true,i?.fail(),r.break(),o$1?.framework.links.installation&&r.error(`We could not detect a supported framework at ${c.info(t.cwd)}.
Visit ${c.info(o$1?.framework.links.installation)} to manually configure your project.
Once configured, you can use the cli to add components.`),r.break(),process.exit(1)),i?.succeed(`Verifying framework. Found ${c.info(o$1.framework.label)}.`);let n="Validating Tailwind CSS.";o$1.tailwindVersion==="v4"&&(n=`Validating Tailwind CSS config. Found ${c.info("v4")}.`);let a=s(n,{silent:t.silent}).start();o$1.tailwindVersion==="v3"&&(!o$1?.tailwindConfigFile||!o$1?.tailwindCssFile)?(e["5"]=true,a?.fail()):o$1.tailwindVersion==="v4"&&!o$1?.tailwindCssFile?(e["5"]=true,a?.fail()):o$1.tailwindVersion?a?.succeed():(e["5"]=true,a?.fail());let s$1=s("Validating import alias.",{silent:t.silent}).start();return o$1?.aliasPrefix?s$1?.succeed():(e["6"]=true,s$1?.fail()),Object.keys(e).length>0&&(e["5"]&&(r.break(),r.error(`No Tailwind CSS configuration found at ${c.info(t.cwd)}.`),r.error("It is likely you do not have Tailwind CSS installed or have an invalid configuration."),r.error("Install Tailwind CSS then try again."),o$1?.framework.links.tailwind&&r.error(`Visit ${c.info(o$1?.framework.links.tailwind)} to get started.`)),e["6"]&&(r.break(),r.error("No import alias found in your tsconfig.json file."),o$1?.framework.links.installation&&r.error(`Visit ${c.info(o$1?.framework.links.installation)} to learn how to set an import alias.`)),r.break(),process.exit(1)),{errors:e,projectInfo:o$1}}function $t(t,e){if(t.includes("\0"))return  false;let r;try{r=t;let u="";for(;r!==u&&r.includes("%");)u=r,r=decodeURIComponent(r);}catch{return  false}let i=D__default.normalize(r.replace(/\\/g,"/")),o=D__default.normalize(e),n=u=>u.replace(/\[\.\.\..*?\]/g,"").includes("..");if(n(i)||n(r)||n(t))return  false;let a=u=>u.replace(/\[\.\.\..*?\]/g,""),s=a(t),c=a(r);if([/\.\.[\/\\]/,/[\/\\]\.\./,/\.\./,/\.\.%/,/\x00/,/[\x01-\x1f]/].some(u=>u.test(s)||u.test(c))||(t.includes("~")||r.includes("~"))&&(t.includes("../")||r.includes("../")))return  false;if(/^[a-zA-Z]:[\/\\]/.test(r))return process.platform==="win32"?r.toLowerCase().startsWith(e.toLowerCase()):false;if(D__default.isAbsolute(i))return i.startsWith(o+D__default.sep);let d=D__default.resolve(o,i);return d.startsWith(o+D__default.sep)||d===o}async function Ve(t,e,r){if(!e.resolvedPaths.tailwindCss||!t||Object.keys(t).length===0)return;r={silent:false,...r};let i=e.resolvedPaths.tailwindCss,o=D__default.relative(e.resolvedPaths.cwd,i),n=s(`Updating ${c.info(o)}`,{silent:r.silent}).start(),a=await promises.readFile(i,"utf8"),s$1=await Er(a,t);await promises.writeFile(i,s$1,"utf8"),n.succeed();}async function Er(t,e){let r=[jr(e)],i=await x(r).process(t,{from:void 0}),o=i.css,n=i.root;if(n.nodes&&n.nodes.length>0){let a=n.nodes[n.nodes.length-1];a.type==="atrule"&&!a.nodes&&!o.trimEnd().endsWith(";")&&(o=o.trimEnd()+";");}return o=o.replace(/\/\* ---break--- \*\//g,""),o=o.replace(/(\n\s*\n)+/g,`

`),o=o.trimEnd(),o}function jr(t){return {postcssPlugin:"update-css",Once(e){for(let[r,i]of Object.entries(t))if(r.startsWith("@")){let o=r.match(/@([a-zA-Z-]+)\s*(.*)/);if(!o)continue;let[,n,a]=o;if(n==="import"){if(!e.nodes?.find(c=>c.type==="atrule"&&c.name==="import"&&c.params===a)){let c=x.atRule({name:"import",params:a,raws:{semicolon:true}}),f=e.nodes?.filter(m=>m.type==="atrule"&&m.name==="import");if(f&&f.length>0){let m=f[f.length-1];c.raws.before=`
`,e.insertAfter(m,c);}else !e.nodes||e.nodes.length,c.raws.before="",e.prepend(c);}}else if(n==="plugin"){let s=a;a&&!a.startsWith('"')&&!a.startsWith("'")&&(s=`"${a}"`);let c=m=>m.startsWith('"')&&m.endsWith('"')||m.startsWith("'")&&m.endsWith("'")?m.slice(1,-1):m;if(!e.nodes?.find(m=>m.type!=="atrule"||m.name!=="plugin"?false:c(m.params)===c(a))){let m=x.atRule({name:"plugin",params:s,raws:{semicolon:true,before:`
`}}),d=e.nodes?.filter(g=>g.type==="atrule"&&g.name==="import"),u=e.nodes?.filter(g=>g.type==="atrule"&&g.name==="plugin");if(u&&u.length>0){let g=u[u.length-1];e.insertAfter(g,m);}else if(d&&d.length>0){let g=d[d.length-1];e.insertAfter(g,m),e.insertBefore(m,x.comment({text:"---break---"})),e.insertAfter(m,x.comment({text:"---break---"}));}else e.prepend(m),e.insertBefore(m,x.comment({text:"---break---"})),e.insertAfter(m,x.comment({text:"---break---"}));}}else if(typeof i=="object"&&Object.keys(i).length===0){if(!e.nodes?.find(c=>c.type==="atrule"&&c.name===n&&c.params===a)){let c=x.atRule({name:n,params:a,raws:{semicolon:true}});e.append(c),e.insertBefore(c,x.comment({text:"---break---"}));}}else if(n==="keyframes"){let s=e.nodes?.find(f=>f.type==="atrule"&&f.name==="theme"&&f.params==="inline");s||(s=x.atRule({name:"theme",params:"inline",raws:{semicolon:true,between:" ",before:`
`}}),e.append(s),e.insertBefore(s,x.comment({text:"---break---"})));let c=x.atRule({name:"keyframes",params:a,raws:{semicolon:true,between:" ",before:`
  `}});if(s.append(c),typeof i=="object")for(let[f,m]of Object.entries(i))ee(c,f,m);}else if(n==="utility"){let s=e.nodes?.find(c=>c.type==="atrule"&&c.name===n&&c.params===a);if(s){if(typeof i=="object")for(let[c,f]of Object.entries(i))if(typeof f=="string"){let m=s.nodes?.find(u=>u.type==="decl"&&u.prop===c),d=x.decl({prop:c,value:f,raws:{semicolon:true,before:`
    `}});m?m.replaceWith(d):s.append(d);}else typeof f=="object"&&ee(s,c,f);}else {let c=x.atRule({name:n,params:a,raws:{semicolon:true,between:" ",before:`
`}});if(e.append(c),e.insertBefore(c,x.comment({text:"---break---"})),typeof i=="object")for(let[f,m]of Object.entries(i))if(typeof m=="string"){let d=x.decl({prop:f,value:m,raws:{semicolon:true,before:`
    `}});c.append(d);}else typeof m=="object"&&ee(c,f,m);}}else Tt(e,n,a,i);}else ee(e,r,i);}}}function Tt(t,e,r,i){let o=t.nodes?.find(n=>n.type==="atrule"&&n.name===e&&n.params===r);if(o||(o=x.atRule({name:e,params:r,raws:{semicolon:true,between:" ",before:`
`}}),t.append(o),t.insertBefore(o,x.comment({text:"---break---"}))),typeof i=="object")for(let[n,a]of Object.entries(i))if(n.startsWith("@")){let s=n.match(/@([a-zA-Z-]+)\s*(.*)/);if(s){let[,c,f]=s;Tt(o,c,f,a);}}else ee(o,n,a);else if(typeof i=="string")try{let a=x.parse(`.temp{${i}}`).first;if(a&&a.nodes){let s=x.rule({selector:"temp",raws:{semicolon:!0,between:" ",before:`
  `}});a.nodes.forEach(c=>{if(c.type==="decl"){let f=c.clone();f.raws.before=`
    `,s.append(f);}}),s.nodes?.length&&o.append(s);}}catch(n){throw console.error("Error parsing at-rule content:",i,n),n}}function ee(t,e,r){let i=t.nodes?.find(o=>o.type==="rule"&&o.selector===e);if(i||(i=x.rule({selector:e,raws:{semicolon:true,between:" ",before:`
  `}}),t.append(i)),typeof r=="object"){for(let[o,n]of Object.entries(r))if(o.startsWith("@")&&typeof n=="object"&&n!==null&&Object.keys(n).length===0){let a=o.match(/@([a-zA-Z-]+)\s*(.*)/);if(a){let[,s,c]=a,f=x.atRule({name:s,params:c,raws:{semicolon:true,before:`
    `}});i.append(f);}}else if(typeof n=="string"){let a=x.decl({prop:o,value:n,raws:{semicolon:true,before:`
    `}}),s=i.nodes?.find(c=>c.type==="decl"&&c.prop===o);s?s.replaceWith(a):i.append(a);}else if(typeof n=="object"){let a=o.startsWith("&")?e.replace(/^([^:]+)/,`$1${o.substring(1)}`):o;ee(t,a,n);}}else if(typeof r=="string")try{let n=x.parse(`.temp{${r}}`).first;n&&n.nodes&&n.nodes.forEach(a=>{if(a.type==="decl"){let s=a.clone();s.raws.before=`
    `,i?.append(s);}});}catch(o){throw console.error("Error parsing rule content:",e,r,o),o}}async function Me(t,e,r){if(!e.resolvedPaths.tailwindCss||!Object.keys(t??{}).length)return;r={cleanupDefaultNextStyles:false,silent:false,tailwindVersion:"v3",overwriteCssVars:false,initIndex:true,...r};let i=e.resolvedPaths.tailwindCss,o=D__default.relative(e.resolvedPaths.cwd,i),n=s(`Updating CSS variables in ${c.info(o)}`,{silent:r.silent}).start(),a=await promises.readFile(i,"utf8"),s$1=await Nr(a,t??{},e,{cleanupDefaultNextStyles:r.cleanupDefaultNextStyles,tailwindVersion:r.tailwindVersion,tailwindConfig:r.tailwindConfig,overwriteCssVars:r.overwriteCssVars,initIndex:r.initIndex});await promises.writeFile(i,s$1,"utf8"),n.succeed();}async function Nr(t,e,r,i={cleanupDefaultNextStyles:false,tailwindVersion:"v3",tailwindConfig:void 0,overwriteCssVars:false,initIndex:true}){i={cleanupDefaultNextStyles:false,tailwindVersion:"v3",tailwindConfig:void 0,overwriteCssVars:false,initIndex:true,...i};let o=[Fr(e)];if(i.cleanupDefaultNextStyles&&o.push(_t()),i.tailwindVersion==="v4"){if(o=[],r.resolvedPaths?.cwd){let s=n(r.resolvedPaths.cwd);!s?.dependencies?.["tailwindcss-animate"]&&!s?.devDependencies?.["tailwindcss-animate"]&&i.initIndex&&o.push(Vr({params:"tw-animate-css"}));}o.push(Lr({params:"dark (&:is(.dark *))"})),i.cleanupDefaultNextStyles&&o.push(_t()),o.push(_r(e,{overwriteCssVars:i.overwriteCssVars})),o.push(Dr(e)),i.tailwindConfig&&(o.push(Mr(i.tailwindConfig)),o.push(zr(i.tailwindConfig)),o.push(Wr(i.tailwindConfig)));}r.tailwind.cssVariables&&i.initIndex&&o.push(Tr({tailwindVersion:i.tailwindVersion}));let a=(await x(o).process(t,{from:void 0})).css;return a=a.replace(/\/\* ---break--- \*\//g,""),i.tailwindVersion==="v4"&&(a=a.replace(/(\n\s*\n)+/g,`

`)),a}function Tr({tailwindVersion:t}){return {postcssPlugin:"update-base-layer",Once(e){let r=[{selector:"*",apply:t==="v4"?"border-border outline-ring/50":"border-border"},{selector:"body",apply:"bg-background text-foreground"}],i=e.nodes.find(o=>o.type==="atrule"&&o.name==="layer"&&o.params==="base"&&r.every(({selector:n,apply:a})=>o.nodes?.some(s=>s.type==="rule"&&s.selector===n&&s.nodes.some(c=>c.type==="atrule"&&c.name==="apply"&&c.params===a))));i||(i=x.atRule({name:"layer",params:"base",raws:{semicolon:true,between:" ",before:`
`}}),e.append(i),e.insertBefore(i,x.comment({text:"---break---"}))),r.forEach(({selector:o,apply:n})=>{i?.nodes?.find(s=>s.type==="rule"&&s.selector===o)||i?.append(x.rule({selector:o,nodes:[x.atRule({name:"apply",params:n,raws:{semicolon:true,before:`
    `}})],raws:{semicolon:true,between:" ",before:`
  `}}));});}}}function Fr(t){return {postcssPlugin:"update-css-vars",Once(e){let r=e.nodes.find(i=>i.type==="atrule"&&i.name==="layer"&&i.params==="base");r instanceof $r||(r=x.atRule({name:"layer",params:"base",nodes:[],raws:{semicolon:true,before:`
`,between:" "}}),e.append(r),e.insertBefore(r,x.comment({text:"---break---"}))),r!==void 0&&Object.entries(t).forEach(([i,o])=>{let n=i==="light"?":root":`.${i}`;Ar(r,n,o);});}}}function At(t){let e=t.nodes.find(r=>r.type==="rule"&&r.selector===":root");if(e){let r=["--background","--foreground"];e.nodes.filter(i=>i.type==="decl"&&r.includes(i.prop)).forEach(i=>i.remove()),e.nodes.length===0&&e.remove();}}function _t(){return {postcssPlugin:"cleanup-default-next-styles",Once(t){let e=t.nodes.find(i=>i.type==="rule"&&i.selector==="body");e&&(e.nodes.find(i=>i.type==="decl"&&i.prop==="color"&&["rgb(var(--foreground-rgb))","var(--foreground)"].includes(i.value))?.remove(),e.nodes.find(i=>i.type==="decl"&&i.prop==="background"&&(i.value.startsWith("linear-gradient")||i.value==="var(--background)"))?.remove(),e.nodes.find(i=>i.type==="decl"&&i.prop==="font-family"&&i.value==="Arial, Helvetica, sans-serif")?.remove(),e.nodes.length===0&&e.remove()),At(t);let r=t.nodes.find(i=>i.type==="atrule"&&i.params==="(prefers-color-scheme: dark)");r&&(At(r),r.nodes.length===0&&r.remove());}}}function Ar(t,e,r){let i=t.nodes?.find(o=>o.type==="rule"&&o.selector===e);i||Object.keys(r).length>0&&(i=x.rule({selector:e,raws:{between:" ",before:`
  `}}),t.append(i)),Object.entries(r).forEach(([o,n])=>{let a=`--${o.replace(/^--/,"")}`,s=x.decl({prop:a,value:n,raws:{semicolon:true}}),c=i?.nodes.find(f=>f.type==="decl"&&f.prop===a);c?c.replaceWith(s):i?.append(s);});}function _r(t,e){return {postcssPlugin:"update-css-vars-v4",Once(r){Object.entries(t).forEach(([i,o])=>{let n=i==="light"?":root":`.${i}`;if(i==="theme"){n="@theme";let s=be(r);Object.entries(o).forEach(([c,f])=>{let m=`--${c.replace(/^--/,"")}`,d=x.decl({prop:m,value:f,raws:{semicolon:true}}),u=s?.nodes?.find(g=>g.type==="decl"&&g.prop===m);e.overwriteCssVars?u?u.replaceWith(d):s?.append(d):u||s?.append(d);});return}let a=r.nodes?.find(s=>s.type==="rule"&&s.selector===n);!a&&Object.keys(o).length>0&&(a=x.rule({selector:n,nodes:[],raws:{semicolon:true,between:" ",before:`
`}}),r.append(a),r.insertBefore(a,x.comment({text:"---break---"}))),Object.entries(o).forEach(([s,c])=>{let f=`--${s.replace(/^--/,"")}`;f==="--sidebar-background"&&(f="--sidebar"),Dt(c)&&(c=`hsl(${c})`);let m=x.decl({prop:f,value:c,raws:{semicolon:true}}),d=a?.nodes.find(u=>u.type==="decl"&&u.prop===f);e.overwriteCssVars?d?d.replaceWith(m):a?.append(m):d||a?.append(m);});});}}}function Dr(t){return {postcssPlugin:"update-theme",Once(e){let r=Array.from(new Set(Object.keys(t).flatMap(n=>Object.keys(t[n]||{}))));if(!r.length)return;let i=be(e),o=i.nodes?.filter(n=>n.type==="decl"&&n.prop.startsWith("--"));for(let n of r){let a=Object.values(t).find(d=>d[n])?.[n];if(!a)continue;if(n==="radius"){let d={sm:"calc(var(--radius) - 4px)",md:"calc(var(--radius) - 2px)",lg:"var(--radius)",xl:"calc(var(--radius) + 4px)"};for(let[u,g]of Object.entries(d)){let w=x.decl({prop:`--radius-${u}`,value:g,raws:{semicolon:true}});i?.nodes?.find(y=>y.type==="decl"&&y.prop===w.prop)||i?.append(w);}continue}let s=Dt(a)||Ur(a)?`--color-${n.replace(/^--/,"")}`:`--${n.replace(/^--/,"")}`;s==="--color-sidebar-background"&&(s="--color-sidebar");let c=`var(--${n})`;s==="--color-sidebar"&&(c="var(--sidebar)");let f=x.decl({prop:s,value:c,raws:{semicolon:true}});i?.nodes?.find(d=>d.type==="decl"&&d.prop===f.prop)||(o?.length?i?.insertAfter(o[o.length-1],f):i?.append(f));}}}}function be(t){let e=t.nodes.find(r=>r.type==="atrule"&&r.name==="theme"&&r.params==="inline");return e||(e=x.atRule({name:"theme",params:"inline",nodes:[],raws:{semicolon:true,between:" ",before:`
`}}),t.append(e),t.insertBefore(e,x.comment({text:"---break---"}))),e}function Lr({params:t}){return {postcssPlugin:"add-custom-variant",Once(e){if(!e.nodes.find(i=>i.type==="atrule"&&i.name==="custom-variant")){let i=e.nodes.filter(n=>n.type==="atrule"&&n.name==="import"),o=x.atRule({name:"custom-variant",params:t,raws:{semicolon:true,before:`
`}});if(i.length>0){let n=i[i.length-1];e.insertAfter(n,o);}else e.insertAfter(e.nodes[0],o);e.insertBefore(o,x.comment({text:"---break---"}));}}}}function Vr({params:t}){return {postcssPlugin:"add-custom-import",Once(e){let r=e.nodes.filter(n=>n.type==="atrule"&&n.name==="import"),i=e.nodes.find(n=>n.type==="atrule"&&n.name==="custom-variant");if(!r.some(n=>n.params.replace(/["']/g,"")===t)){let n=x.atRule({name:"import",params:`"${t}"`,raws:{semicolon:true,before:`
`}});if(r.length>0){let a=r[r.length-1];e.insertAfter(a,n);}else i?(e.insertBefore(i,n),e.insertBefore(i,x.comment({text:"---break---"}))):(e.prepend(n),e.insertAfter(n,x.comment({text:"---break---"})));}}}}function Mr(t){return {postcssPlugin:"update-tailwind-config",Once(e){if(!t?.plugins)return;let i=Br(e)==="single"?"'":'"',o=e.nodes.filter(a=>a.type==="atrule"&&a.name==="plugin"),n=o[o.length-1]||e.nodes[0];for(let a of t.plugins){let s=a.replace(/^require\(["']|["']\)$/g,"");if(o.some(f=>f.params.replace(/["']/g,"")===s))continue;let c=x.atRule({name:"plugin",params:`${i}${s}${i}`,raws:{semicolon:true,before:`
`}});e.insertAfter(n,c),e.insertBefore(c,x.comment({text:"---break---"}));}}}}function Wr(t){return {postcssPlugin:"update-tailwind-config-keyframes",Once(e){if(!t?.theme?.extend?.keyframes)return;let r=be(e),i=r.nodes?.filter(n=>n.type==="atrule"&&n.name==="keyframes"),o=z.record(z.string(),z.record(z.string(),z.string()));for(let[n,a]of Object.entries(t.theme.extend.keyframes)){if(typeof n!="string")continue;let s=o.safeParse(a);if(!s.success||i?.find(f=>f.type==="atrule"&&f.name==="keyframes"&&f.params===n))continue;let c=x.atRule({name:"keyframes",params:n,nodes:[],raws:{semicolon:true,between:" ",before:`
  `}});for(let[f,m]of Object.entries(s.data)){let d=x.rule({selector:f,nodes:Object.entries(m).map(([u,g])=>x.decl({prop:u,value:g,raws:{semicolon:true,before:`
      `,between:": "}})),raws:{semicolon:true,between:" ",before:`
    `}});c.append(d);}r.append(c),r.insertBefore(c,x.comment({text:"---break---"}));}}}}function zr(t){return {postcssPlugin:"update-tailwind-config-animation",Once(e){if(!t?.theme?.extend?.animation)return;let r=be(e),i=r.nodes?.filter(n=>n.type==="decl"&&n.prop.startsWith("--animate-")),o=z.record(z.string(),z.string()).safeParse(t.theme.extend.animation);if(o.success)for(let[n,a]of Object.entries(o.data)){let s=`--animate-${n}`;if(i?.find(f=>f.prop===s))continue;let c=x.decl({prop:s,value:a,raws:{semicolon:true,between:": ",before:`
  `}});r.append(c);}}}}function Br(t){return t.nodes[0].toString().includes("'")?"single":"double"}function Dt(t){if(t.startsWith("hsl")||t.startsWith("rgb")||t.startsWith("#")||t.startsWith("oklch"))return  false;let e=t.split(" ");return e.length===3&&e.slice(1,3).every(r=>r.includes("%"))}function Ur(t){return t.startsWith("hsl")||t.startsWith("rgb")||t.startsWith("#")||t.startsWith("oklch")}async function _(t,e,r$1,i){if(t=Array.from(new Set(t)),e=Array.from(new Set(e)),!t?.length&&!e?.length)return;i={silent:false,...i};let o=s("Installing dependencies.",{silent:i.silent})?.start(),n=await Yr(r$1),a="";if(Jr(r$1)&&n==="npm")if(i.silent)a="force";else {o.stopAndPersist(),r.warn(`
It looks like you are using React 19. 
Some packages may fail to install due to peer dependency issues in npm (see https://ui.shadcn.com/react-19).
`);let s=await Ge([{type:"select",name:"flag",message:"How would you like to proceed?",choices:[{title:"Use --force",value:"force"},{title:"Use --legacy-peer-deps",value:"legacy-peer-deps"}]}]);s&&(a=s.flag);}o?.start(),await qr(n,t,e,r$1.resolvedPaths.cwd,a),o?.succeed();}function Jr(t){let e=n(t.resolvedPaths.cwd,false);if(!e?.dependencies?.react)return  false;let r=/^(?:\^|~)?19(?:\.\d+)*(?:-.*)?$/.test(e.dependencies.react),i=e.dependencies["react-day-picker"]?.startsWith("8");return r&&i}async function Yr(t){return n(t.resolvedPaths.cwd,false)?.dependencies?.expo?"expo":a$1(t.resolvedPaths.cwd)}async function qr(t,e,r,i,o){if(t==="npm")return Kr(e,r,i,o);if(t==="deno")return Hr(e,r,i);if(t==="expo")return Qr(e,r,i);e?.length&&await execa(t,["add",...e],{cwd:i}),r?.length&&await execa(t,["add","-D",...r],{cwd:i});}async function Kr(t,e,r,i){t.length&&await execa("npm",["install",...i?[`--${i}`]:[],...t],{cwd:r}),e.length&&await execa("npm",["install",...i?[`--${i}`]:[],"-D",...e],{cwd:r});}async function Hr(t,e,r){t?.length&&await execa("deno",["add",...t.map(i=>`npm:${i}`)],{cwd:r}),e?.length&&await execa("deno",["add","-D",...e.map(i=>`npm:${i}`)],{cwd:r});}async function Qr(t,e,r){t.length&&await execa("npx",["expo","install",...t],{cwd:r}),e.length&&await execa("npx",["expo","install","-- -D",...e],{cwd:r});}async function ze(t,e,r$1){if(!t||Object.keys(t).length===0)return {envVarsAdded:[],envFileUpdated:null,envFileCreated:null};r$1={silent:false,...r$1};let i=s("Adding environment variables.",{silent:r$1.silent})?.start(),o=e.resolvedPaths.cwd,n=D__default.join(o,".env.local"),a=D$1(o);a&&(n=a);let s$1=existsSync(n),c$1=D__default.basename(n),f=Object.entries(t).map(([g,w])=>`${g}=${w}`).join(`
`),m=[],d=null,u=null;if(s$1){let g=await promises.readFile(n,"utf-8"),w=F$1(g,f);if(m=E(g,f),m.length>0){if(await promises.writeFile(n,w,"utf-8"),d=D__default.relative(o,n),i?.succeed(`Added the following variables to ${c.info(c$1)}:`),!r$1.silent)for(let y of m)r.log(`  ${c.success("+")} ${y}`);}else i?.stop();}else if(await promises.writeFile(n,f+`
`,"utf-8"),u=D__default.relative(o,n),m=Object.keys(t),i?.succeed(`Added the following variables to ${c.info(c$1)}:`),!r$1.silent)for(let g of m)r.log(`  ${c.success("+")} ${g}`);return !r$1.silent&&m.length>0&&r.break(),{envVarsAdded:m,envFileUpdated:d,envFileCreated:u}}async function se(t,e,r){r={overwrite:false,silent:false,isNewProject:false,baseStyle:true,...r};let i=await j(e);return i&&i.ui&&i.ui.resolvedPaths.cwd!==e.resolvedPaths.cwd?await ti(t,e,i,{...r,isRemote:t?.length===1&&!!t[0].match(/\/chat\/b\//)}):await ei(t,e,r)}async function ei(t,e,r$1){if(!r$1.baseStyle&&!t.length)return;let i=s("Checking registry.",{silent:r$1.silent})?.start(),o=await U(t,L$1(e));if(!o)return i?.fail(),Q(new Error("Failed to fetch components from registry."));try{Vt(o.files??[],e.resolvedPaths.cwd);}catch(s){return i?.fail(),Q(s)}i?.succeed();let n=await q$1(e);await R(o.tailwind?.config,e,{silent:r$1.silent,tailwindVersion:n});let a=await Lt(t,e);await Me(o.cssVars,e,{cleanupDefaultNextStyles:r$1.isNewProject,silent:r$1.silent,tailwindVersion:n,tailwindConfig:o.tailwind?.config,overwriteCssVars:a,initIndex:r$1.baseStyle}),await Ve(o.css,e,{silent:r$1.silent}),await ze(o.envVars,e,{silent:r$1.silent}),await _(o.dependencies,o.devDependencies,e,{silent:r$1.silent}),await I(o.files,e,{overwrite:r$1.overwrite,silent:r$1.silent}),o.docs&&r.info(o.docs);}async function ti(t,e,r$1,i){if(!i.baseStyle&&!t.length)return;let o=s("Checking registry.",{silent:i.silent})?.start(),n=await U(t,L$1(e));if(!n)return o?.fail(),Q(new Error("Failed to fetch components from registry."));try{Vt(n.files??[],e.resolvedPaths.cwd);}catch(y){return o?.fail(),Q(y)}o?.succeed();let a=[],s$1=[],c=[],f=s("Installing components.")?.start(),m=r$1.ui,d=await q$1(m),u=l(e.resolvedPaths.cwd,m.resolvedPaths.ui);if(n.tailwind?.config&&(await R(n.tailwind?.config,m,{silent:true,tailwindVersion:d}),s$1.push(D__default.relative(u,m.resolvedPaths.tailwindConfig))),n.cssVars){let y=await Lt(t,e);await Me(n.cssVars,m,{silent:true,tailwindVersion:d,tailwindConfig:n.tailwind?.config,overwriteCssVars:y}),s$1.push(D__default.relative(u,m.resolvedPaths.tailwindCss));}n.css&&(await Ve(n.css,m,{silent:true}),s$1.push(D__default.relative(u,m.resolvedPaths.tailwindCss))),n.envVars&&await ze(n.envVars,m,{silent:true}),await _(n.dependencies,n.devDependencies,m,{silent:true});let g=new Map;for(let y of n.files??[]){let C=y.type||"registry:ui";g.has(C)||g.set(C,[]),g.get(C).push(y);}for(let y of Array.from(g.keys())){let C=g.get(y),S=y==="registry:ui"?r$1.ui:e,V=l(e.resolvedPaths.cwd,S.resolvedPaths.ui||S.resolvedPaths.cwd),E=await k(V,S.resolvedPaths.cwd)??S.resolvedPaths.cwd,G=await I(C,S,{overwrite:i.overwrite,silent:true,rootSpinner:f,isRemote:i.isRemote,isWorkspace:true});a.push(...G.filesCreated.map(j=>D__default.relative(V,D__default.join(E,j)))),s$1.push(...G.filesUpdated.map(j=>D__default.relative(V,D__default.join(E,j)))),c.push(...G.filesSkipped.map(j=>D__default.relative(V,D__default.join(E,j))));}if(f?.succeed(),a.sort(),s$1.sort(),c.sort(),!(a.length||s$1.length)&&!c.length&&s("No files updated.",{silent:i.silent})?.info(),a.length){s(`Created ${a.length} ${a.length===1?"file":"files"}:`,{silent:i.silent})?.succeed();for(let y of a)r.log(`  - ${y}`);}if(s$1.length){s(`Updated ${s$1.length} ${s$1.length===1?"file":"files"}:`,{silent:i.silent})?.info();for(let y of s$1)r.log(`  - ${y}`);}if(c.length){s(`Skipped ${c.length} ${s$1.length===1?"file":"files"}: (use --overwrite to overwrite)`,{silent:i.silent})?.info();for(let y of c)r.log(`  - ${y}`);}n.docs&&r.info(n.docs);}async function Lt(t,e){let r=await W(t,{config:e});return z.array(g$1).parse(r).some(o=>o.type==="registry:theme"||o.type==="registry:style")}function Vt(t,e){for(let r of t)if(r?.target&&!$t(r.target,e))throw new Error(`We found an unsafe file path "${r.target} in the registry item. Installation aborted.`)}var oi="https://codeload.github.com/shadcn-ui/ui/tar.gz/main",q={next:"next","next-monorepo":"next-monorepo"};async function ve(t){t={srcDir:false,...t};let e=t.template&&q[t.template]?t.template:"next",r$1=e===q.next?"my-app":"my-monorepo",i="latest",o=t.components?.length===1&&!!t.components[0].match(/\/chat\/b\//);if(t.components&&o)try{let[s]=await P(t.components),{meta:c}=z.object({meta:z.object({nextVersion:z.string()})}).parse(s);i=c.nextVersion,e=q.next;}catch(s){r.break(),Q(s);}if(!t.force){let{type:s,name:c$1}=await Ge([{type:t.template||o?null:"select",name:"type",message:`The path ${c.info(t.cwd)} does not contain a package.json file.
  Would you like to start a new project?`,choices:[{title:"Next.js",value:"next"},{title:"Next.js (Monorepo)",value:"next-monorepo"}],initial:0},{type:"text",name:"name",message:"What is your project named?",initial:r$1,format:f=>f.trim(),validate:f=>f.length>128?"Name should be less than 128 characters.":true}]);e=s??e,r$1=c$1;}let n=await a$1(t.cwd,{withFallback:true}),a=`${t.cwd}/${r$1}`;try{await K.access(t.cwd,K.constants.W_OK);}catch{r.break(),r.error(`The path ${c.info(t.cwd)} is not writable.`),r.error(`It is likely you do not have write permissions for this folder or the path ${c.info(t.cwd)} does not exist.`),r.break(),process.exit(1);}return K.existsSync(D__default.resolve(t.cwd,r$1,"package.json"))&&(r.break(),r.error(`A project with the name ${c.info(r$1)} already exists.`),r.error("Please choose a different name and try again."),r.break(),process.exit(1)),e===q.next&&await ni(a,{version:i,cwd:t.cwd,packageManager:n,srcDir:!!t.srcDir}),e===q["next-monorepo"]&&await si(a,{packageManager:n}),{projectPath:a,projectName:r$1,template:e}}async function ni(t,e){let r$1=s("Creating a new Next.js project. This may take a few minutes.").start(),i=["--tailwind","--eslint","--typescript","--app",e.srcDir?"--src-dir":"--no-src-dir","--no-import-alias",`--use-${e.packageManager}`];(e.version.startsWith("15")||e.version.startsWith("latest")||e.version.startsWith("canary"))&&i.push("--turbopack");try{await execa("npx",[`create-next-app@${e.version}`,t,"--silent",...i],{cwd:e.cwd});}catch{r.break(),r.error("Something went wrong creating a new Next.js project. Please try again."),process.exit(1);}r$1?.succeed("Creating a new Next.js project.");}async function si(t,e){let r=s("Creating a new Next.js monorepo. This may take a few minutes.").start();try{let i=D__default.join(ri.tmpdir(),`shadcn-template-${Date.now()}`);await K.ensureDir(i);let o=await fetch(oi);if(!o.ok)throw new Error(`Failed to download template: ${o.statusText}`);let n=D__default.resolve(i,"template.tar.gz");await K.writeFile(n,Buffer.from(await o.arrayBuffer())),await execa("tar",["-xzf",n,"-C",i,"--strip-components=2","ui-main/templates/monorepo-next"]);let a=D__default.resolve(i,"monorepo-next");await K.move(a,t),await K.remove(i),await execa(e.packageManager,["install"],{cwd:t});let s=process.cwd();await execa("git",["--version"],{cwd:t}),await execa("git",["init"],{cwd:t}),await execa("git",["add","-A"],{cwd:t}),await execa("git",["commit","-m","Initial commit"],{cwd:t}),r?.succeed("Creating a new Next.js monorepo.");}catch(i){r?.fail("Something went wrong creating a new Next.js monorepo."),Q(i);}}async function F(t=process.cwd()){try{let{config:e}=await import('@dotenvx/dotenvx'),r=[".env.local",".env.development.local",".env.development",".env"];for(let i of r){let o=join(t,i);existsSync(o)&&e({path:o,overload:!1,quiet:!0});}}catch(e){r.warn("Failed to load env files:",e);}}var ae=".bak";function Mt(t){if(!K.existsSync(t))return null;let e=`${t}${ae}`;try{return K.renameSync(t,e),e}catch(r){return console.error(`Failed to create backup of ${t}: ${r}`),null}}function Wt(t){let e=`${t}${ae}`;if(!K.existsSync(e))return  false;try{return K.renameSync(e,t),!0}catch(r){return console.error(`Warning: Could not restore backup file ${e}: ${r}`),false}}function Ue(t){let e=`${t}${ae}`;if(!K.existsSync(e))return  false;try{return K.unlinkSync(e),!0}catch{return  false}}async function Bt(t,e,r){if(!t)return;r={silent:false,...r};let i=D__default.relative(e.resolvedPaths.cwd,e.resolvedPaths.tailwindConfig),o=s(`Updating ${c.info(i)}`,{silent:r.silent}).start(),n=await promises.readFile(e.resolvedPaths.tailwindConfig,"utf8"),a=await mi(n,t,e);await promises.writeFile(e.resolvedPaths.tailwindConfig,a,"utf8"),o?.succeed();}async function mi(t,e,r){let i=await S(t,r),o=i.getDescendantsOfKind(SyntaxKind.ObjectLiteralExpression).find(n=>n.getProperties().some(a=>a.isKind(SyntaxKind.PropertyAssignment)&&a.getName()==="content"));return o?(fi(o,e),i.getFullText()):t}async function fi(t,e){let r=T(t),i=t.getProperty("content");if(!i){let o={name:"content",initializer:`[${r}${e.join(`${r}, ${r}`)}${r}]`};return t.addPropertyAssignment(o),t}if(i.isKind(SyntaxKind.PropertyAssignment)){let o=i.getInitializer();if(o?.isKind(SyntaxKind.ArrayLiteralExpression))for(let n of e){let a=`${r}${n}${r}`;o.getElements().map(s=>s.getText()).includes(a)||o.addElement(a);}return t}return t}process.on("exit",t=>{let e=D__default.resolve(process.cwd(),"components.json");return t===0?Ue(e):Wt(e)});var gi=z.object({cwd:z.string(),components:z.array(z.string()).optional(),yes:z.boolean(),defaults:z.boolean(),force:z.boolean(),silent:z.boolean(),isNewProject:z.boolean(),srcDir:z.boolean().optional(),cssVariables:z.boolean(),template:z.string().optional().refine(t=>t?q[t]:true,{message:"Invalid template. Please use 'next' or 'next-monorepo'."}),baseColor:z.string().optional().refine(t=>t?a.find(e=>e.name===t):true,{message:`Invalid base color. Please use '${a.map(t=>t.name).join("', '")}'`}),baseStyle:z.boolean()}),Ut=new Command().name("init").description("initialize your project and install dependencies").argument("[components...]","names, url or local path to component").option("-t, --template <template>","the template to use. (next, next-monorepo)").option("-b, --base-color <base-color>","the base color to use. (neutral, gray, zinc, stone, slate)",void 0).option("-y, --yes","skip confirmation prompt.",true).option("-d, --defaults,","use default configuration.",false).option("-f, --force","force overwrite of existing configuration.",false).option("-c, --cwd <cwd>","the working directory. defaults to the current directory.",process.cwd()).option("-s, --silent","mute output.",false).option("--src-dir","use the src directory when creating a new project.",false).option("--no-src-dir","do not use the src directory when creating a new project.").option("--css-variables","use css variables for theming.",true).option("--no-css-variables","do not use css variables for theming.").option("--no-base-style","do not install the base shadcn style.").action(async(t,e)=>{try{e.defaults&&(e.template=e.template||"next",e.baseColor=e.baseColor||"neutral");let r$1=gi.parse({cwd:D__default.resolve(e.cwd),isNewProject:!1,components:t,...e});if(await F(r$1.cwd),t.length>0){let i=L$1({}),o=D__default.resolve(r$1.cwd,"components.json");if(K.existsSync(o)){let a=await K.readJson(o),s=p.partial().parse(a);i=L$1(s),Mt(o);}O(t[0],i);let[n]=await W([t[0]],{config:i});n?.type==="registry:style"&&(r$1.baseColor="neutral",r$1.baseStyle=n.extends==="none"?!1:r$1.baseStyle);}r$1.baseStyle||(r$1.baseColor="neutral"),await Ie(r$1),r.log(`${c.success("Success!")} Project initialization completed.
You may now add components.`),Ue(D__default.resolve(r$1.cwd,"components.json")),r.break();}catch(r$1){r.break(),Q(r$1);}finally{M();}});async function Ie(t){let e,r;if(t.skipPreflight)e=await o(t.cwd);else {let m=await Ot(t);if(m.errors["1"]){let{projectPath:d,template:u}=await ve(t);d||process.exit(1),t.cwd=d,t.isNewProject=true,r=u;}e=m.projectInfo;}if(r==="next-monorepo")return t.cwd=D__default.resolve(t.cwd,"apps/web"),await h(t.cwd);let i$1=await p$1(t.cwd,e),o$1=i$1?await wi(i$1,t):await hi(await h(t.cwd));if(!t.yes){let{proceed:m}=await Ge({type:"confirm",name:"proceed",message:`Write configuration to ${c.info("components.json")}. Proceed?`,initial:true});m||process.exit(0);}let n=s("Writing components.json.").start(),a=D__default.resolve(t.cwd,"components.json"),s$1=`${a}${ae}`;if(!t.force&&K.existsSync(s$1)){let m=await K.readJson(s$1),{registries:d,...u}=ui(m,o$1);o$1={...u,registries:d};}await promises.writeFile(a,`${JSON.stringify(o$1,null,2)}
`,"utf8"),n.succeed();let c$1=await i(t.cwd,o$1),f=[...t.baseStyle?["index"]:[],...t.components??[]];return await se(f,c$1,{overwrite:true,silent:t.silent,baseStyle:t.baseStyle,isNewProject:t.isNewProject||e?.framework.name==="next-app"}),t.isNewProject&&t.srcDir&&await Bt(["./src/**/*.{js,ts,jsx,tsx,mdx}"],c$1,{silent:t.silent}),c$1}async function hi(t=null){let[e$1,r$1]=await Promise.all([_$1(),aa()]);r.info("");let i=await Ge([{type:"toggle",name:"typescript",message:`Would you like to use ${c.info("TypeScript")} (recommended)?`,initial:t?.tsx??true,active:"yes",inactive:"no"},{type:"select",name:"style",message:`Which ${c.info("style")} would you like to use?`,choices:e$1.map(o=>({title:o.label,value:o.name}))},{type:"select",name:"tailwindBaseColor",message:`Which color would you like to use as the ${c.info("base color")}?`,choices:r$1.map(o=>({title:o.label,value:o.name}))},{type:"text",name:"tailwindCss",message:`Where is your ${c.info("global CSS")} file?`,initial:t?.tailwind.css??f},{type:"toggle",name:"tailwindCssVariables",message:`Would you like to use ${c.info("CSS variables")} for theming?`,initial:t?.tailwind.cssVariables??true,active:"yes",inactive:"no"},{type:"text",name:"tailwindPrefix",message:`Are you using a custom ${c.info("tailwind prefix eg. tw-")}? (Leave blank if not)`,initial:""},{type:"text",name:"tailwindConfig",message:`Where is your ${c.info("tailwind.config.js")} located?`,initial:t?.tailwind.config??g},{type:"text",name:"components",message:`Configure the import alias for ${c.info("components")}:`,initial:t?.aliases.components??d},{type:"text",name:"utils",message:`Configure the import alias for ${c.info("utils")}:`,initial:t?.aliases.utils??e},{type:"toggle",name:"rsc",message:`Are you using ${c.info("React Server Components")}?`,initial:t?.rsc??true,active:"yes",inactive:"no"}]);return p.parse({$schema:"https://ui.shadcn.com/schema.json",style:i.style,tailwind:{config:i.tailwindConfig,css:i.tailwindCss,baseColor:i.tailwindBaseColor,cssVariables:i.tailwindCssVariables,prefix:i.tailwindPrefix},rsc:i.rsc,tsx:i.typescript,aliases:{utils:i.utils,components:i.components,lib:i.components.replace(/\/components$/,"lib"),hooks:i.components.replace(/\/components$/,"hooks")}})}async function wi(t,e){let r=t.style,i=e.baseColor,o=t.tailwind.cssVariables;if(!e.defaults){let[n,a,s]=await Promise.all([_$1(),aa(),q$1(t)]),c$1=await Ge([{type:s==="v4"?null:"select",name:"style",message:`Which ${c.info("style")} would you like to use?`,choices:n.map(f=>({title:f.name==="new-york"?"New York (Recommended)":f.label,value:f.name})),initial:0},{type:e.baseColor?null:"select",name:"tailwindBaseColor",message:`Which color would you like to use as the ${c.info("base color")}?`,choices:a.map(f=>({title:f.label,value:f.name}))}]);r=c$1.style??"new-york",i=c$1.tailwindBaseColor??i,o=e.cssVariables;}return p.parse({$schema:t?.$schema,style:r,tailwind:{...t?.tailwind,baseColor:i,cssVariables:o},rsc:t?.rsc,tsx:t?.tsx,iconLibrary:t?.iconLibrary,aliases:t?.aliases})}async function Jt(t){let e={};if(!K.existsSync(t.cwd)||!K.existsSync(D__default.resolve(t.cwd,"package.json")))return e["1"]=true,{errors:e,config:null};if(!K.existsSync(D__default.resolve(t.cwd,"components.json")))return e["3"]=true,{errors:e,config:null};try{let r=await h(t.cwd);return {errors:e,config:r}}catch{r.break(),r.error(`An invalid ${c.info("components.json")} file was found at ${c.info(t.cwd)}.
Before you can add components, you must create a valid ${c.info("components.json")} file by running the ${c.info("init")} command.`),r.error(`Learn more at ${c.info("https://ui.shadcn.com/docs/components-json")}.`),r.break(),process.exit(1);}}async function qt(t,e){let r=D__default.join(e.resolvedPaths.cwd,"app/page.tsx");if(!(await L__default.stat(r)).isFile())return;let[i]=await W([t],{config:e});if(!i?.meta?.importSpecifier||!i?.meta?.moduleSpecifier)return;let o=`import { ${i?.meta?.importSpecifier} } from "${i.meta.moduleSpecifier}"

export default function Page() {
  return <${i?.meta?.importSpecifier} />
}`;await L__default.writeFile(r,o,"utf8");}var xi=z.object({components:z.array(z.string()).optional(),yes:z.boolean(),overwrite:z.boolean(),cwd:z.string(),all:z.boolean(),path:z.string().optional(),silent:z.boolean(),srcDir:z.boolean().optional(),cssVariables:z.boolean()}),Ht=new Command().name("add").description("add a component to your project").argument("[components...]","names, url or local path to component").option("-y, --yes","skip confirmation prompt.",false).option("-o, --overwrite","overwrite existing files.",false).option("-c, --cwd <cwd>","the working directory. defaults to the current directory.",process.cwd()).option("-a, --all","add all available components",false).option("-p, --path <path>","the path to add the component to.").option("-s, --silent","mute output.",false).option("--src-dir","use the src directory when creating a new project.",false).option("--no-src-dir","do not use the src directory when creating a new project.").option("--css-variables","use css variables for theming.",true).option("--no-css-variables","do not use css variables for theming.").action(async(t,e)=>{try{let r$1=xi.parse({components:t,cwd:D__default.resolve(e.cwd),...e});await F(r$1.cwd);let i=await h(r$1.cwd);if(i||(i=m({style:"new-york",resolvedPaths:{cwd:r$1.cwd}})),t.length>0){let[c$1]=await W([t[0]],{config:i}),f=c$1?.type;if(K$1(c$1)){await se(t,i,r$1);return}if(!r$1.yes&&(f==="registry:style"||f==="registry:theme")){r.break();let{confirm:m}=await Ge({type:"confirm",name:"confirm",message:c.warn(`You are about to install a new ${f.replace("registry:","")}. 
Existing CSS variables and components will be overwritten. Continue?`)});m||(r.break(),r.log("Installation cancelled."),r.break(),process.exit(1));}}if(r$1.components?.length||(r$1.components=await Si(r$1)),(await o(r$1.cwd))?.tailwindVersion==="v4"){let c$1=b.filter(f=>r$1.components?.includes(f.name));c$1?.length&&(r.break(),c$1.forEach(f=>{r.warn(c.warn(f.message));}),r.break(),process.exit(1));}let{errors:n,config:a}=await Jt(r$1);if(n["3"]){let{proceed:c$1}=await Ge({type:"confirm",name:"proceed",message:`You need to create a ${c.info("components.json")} file to add components. Proceed?`,initial:!0});c$1||(r.break(),process.exit(1)),a=await Ie({cwd:r$1.cwd,yes:!0,force:!0,defaults:!1,skipPreflight:!1,silent:!0,isNewProject:!1,srcDir:r$1.srcDir,cssVariables:r$1.cssVariables,baseStyle:!0});}let s=!1;if(n["1"]){let{projectPath:c,template:f}=await ve({cwd:r$1.cwd,force:r$1.overwrite,srcDir:r$1.srcDir,components:r$1.components});c||(r.break(),process.exit(1)),r$1.cwd=c,f==="next-monorepo"?(r$1.cwd=D__default.resolve(r$1.cwd,"apps/web"),a=await h(r$1.cwd)):(a=await Ie({cwd:r$1.cwd,yes:!0,force:!0,defaults:!1,skipPreflight:!0,silent:!0,isNewProject:!0,srcDir:r$1.srcDir,cssVariables:r$1.cssVariables,baseStyle:!0}),s=r$1.components?.length===1&&!!r$1.components[0].match(/\/chat\/b\//));}if(!a)throw new Error(`Failed to read config at ${c.info(r$1.cwd)}.`);await se(r$1.components,a,r$1),s&&await qt(r$1.components[0],a);}catch(r$1){r.break(),Q(r$1);}finally{M();}});async function Si(t){let e=await Z();if(!e)return r.break(),Q(new Error("Failed to fetch registry index.")),[];if(t.all)return e.map(o=>o.name).filter(o=>!b.some(n=>n.name===o));if(t.components?.length)return t.components;let{components:r$1}=await Ge({type:"multiselect",name:"components",message:"Which components would you like to add?",hint:"Space to select. A to toggle all. Enter to submit.",instructions:false,choices:e.filter(o=>o.type==="registry:ui"&&!b.some(n=>n.name===o.name)).map(o=>({title:o.name,value:o.name,selected:t.all?true:t.components?.includes(o.name)}))});r$1?.length||(r.warn("No components selected. Exiting."),r.info(""),process.exit(1));let i=z.array(z.string()).safeParse(r$1);return i.success?i.data:(r.error(""),Q(new Error("Something went wrong. Please try again.")),[])}async function Zt(t){let e={},r$1={cwd:t.cwd,registryFile:D__default.resolve(t.cwd,t.registryFile),outputDir:D__default.resolve(t.cwd,t.outputDir)};return K.existsSync(r$1.registryFile)||(e["13"]=true),await K.mkdir(r$1.outputDir,{recursive:true}),Object.keys(e).length>0&&(e["13"]&&(r.break(),r.error(`The path ${c.info(r$1.registryFile)} does not exist.`)),r.break(),process.exit(1)),{errors:e,resolvePaths:r$1}}var Ri=z.object({cwd:z.string(),registryFile:z.string(),outputDir:z.string()}),er=new Command().name("build").description("build components for a shadcn registry").argument("[registry]","path to registry.json file","./registry.json").option("-o, --output <path>","destination directory for json files","./public/r").option("-c, --cwd <cwd>","the working directory. defaults to the current directory.",process.cwd()).action(async(t,e)=>{try{let r$1=Ri.parse({cwd:D.resolve(e.cwd),registryFile:t,outputDir:e.output}),{resolvePaths:i}=await Zt(r$1),o=await L.readFile(i.registryFile,"utf-8"),n=h$1.safeParse(JSON.parse(o));n.success||(r.error(`Invalid registry file found at ${c.info(i.registryFile)}.`),process.exit(1));let a=s("Building registry...");for(let s of n.data.items){a.start(`Building ${s.name}...`),s.$schema="https://ui.shadcn.com/schema/registry-item.json";for(let f of s.files??[])f.content=await L.readFile(D.resolve(i.cwd,f.path),"utf-8");let c$1=g$1.safeParse(s);if(!c$1.success){r.error(`Invalid registry item found for ${c.info(s.name)}.`);continue}await L.writeFile(D.resolve(i.outputDir,`${c$1.data.name}.json`),JSON.stringify(c$1.data,null,2));}await L.copyFile(i.registryFile,D.resolve(i.outputDir,"registry.json")),a.succeed("Building registry.");}catch(r$1){r.break(),Q(r$1);}});var ki=z.object({component:z.string().optional(),yes:z.boolean(),cwd:z.string(),path:z.string().optional()}),rr=new Command().name("diff").description("check for updates against the registry").argument("[component]","the component name").option("-y, --yes","skip confirmation prompt.",false).option("-c, --cwd <cwd>","the working directory. defaults to the current directory.",process.cwd()).action(async(t,e)=>{try{let r$1=ki.parse({component:t,...e}),i=D__default.resolve(r$1.cwd);existsSync(i)||(r.error(`The path ${i} does not exist. Please try again.`),process.exit(1));let o=await h(i);o||(r.warn(`Configuration is missing. Please run ${c.success("init")} to create a components.json file.`),process.exit(1));let n=await Z();if(n||(Q(new Error("Failed to fetch registry index.")),process.exit(1)),!r$1.component){let c$1=o.resolvedPaths.components,f=n.filter(d=>{for(let u of d.files??[]){let g=D__default.resolve(c$1,typeof u=="string"?u:u.path);if(existsSync(g))return !0}return !1}),m=[];for(let d of f){let u=await tr(d,o);u.length&&m.push({name:d.name,changes:u});}m.length||(r.info("No updates found."),process.exit(0)),r.info("The following components have updates available:");for(let d of m){r.info(`- ${d.name}`);for(let u of d.changes)r.info(`  - ${u.filePath}`);}r.break(),r.info(`Run ${c.success("diff <component>")} to see the changes.`),process.exit(0);}let a=n.find(c=>c.name===r$1.component);a||(r.error(`The component ${c.success(r$1.component)} does not exist.`),process.exit(1));let s=await tr(a,o);s.length||(r.info(`No updates found for ${r$1.component}.`),process.exit(0));for(let c of s)r.info(`- ${c.filePath}`),await Ei(c.patch),r.info("");}catch(r){Q(r);}});async function tr(t,e){let r=await da(e.style,[t]),i=await ba(e.tailwind.baseColor);if(!r)return [];let o=[];for(let n of r){let a=await ea(e,n);if(a)for(let s of n.files??[]){let c=D__default.resolve(a,typeof s=="string"?s:s.path);if(!existsSync(c))continue;let f=await promises.readFile(c,"utf8");if(typeof s=="string"||!s.content)continue;let m=await H({filename:s.path,raw:s.content,config:e,baseColor:i}),d=diffLines(m,f);d.length>1&&o.push({filePath:c,patch:d});}}return o}async function Ei(t){t.forEach(e=>{if(e)return e.added?process.stdout.write(c.success(e.value)):e.removed?process.stdout.write(c.error(e.value)):process.stdout.write(e.value)});}var ir=new Command().name("info").description("get information about your project").option("-c, --cwd <cwd>","the working directory. defaults to the current directory.",process.cwd()).action(async t=>{try{r.info("> project info"),console.log(await o(t.cwd)),r.break(),r.info("> components.json"),console.log(await h(t.cwd));}catch(e){Q(e);}});var ke="latest",Ee=[{name:"claude",label:"Claude Code",configPath:".mcp.json",config:{mcpServers:{shadcn:{command:"npx",args:[`shadcn@${ke}`,"mcp"]}}}},{name:"cursor",label:"Cursor",configPath:".cursor/mcp.json",config:{mcpServers:{shadcn:{command:"npx",args:[`shadcn@${ke}`,"mcp"]}}}},{name:"vscode",label:"VS Code",configPath:".vscode/mcp.json",config:{servers:{shadcn:{command:"npx",args:[`shadcn@${ke}`,"mcp"]}}}}],sr=[`shadcn@${ke}`],Qe=new Command().name("mcp").description("MCP server and configuration commands").option("-c, --cwd <cwd>","the working directory. defaults to the current directory.",process.cwd()).action(async t=>{try{await F(t.cwd);let e=new StdioServerTransport;await b$1.connect(e);}catch(e){r.break(),Q(e);}}),_i=He.object({client:He.enum(["claude","cursor","vscode"]),cwd:He.string()});Qe.command("init").description("Initialize MCP configuration for your client").option("--client <client>",`MCP client (${Ee.map(t=>t.name).join(", ")})`).action(async(t,e)=>{try{let i=(e.parent?.opts()||{}).cwd||process.cwd(),o=t.client;if(!o){let f=await Ge({type:"select",name:"client",message:"Which MCP client are you using?",choices:Ee.map(m=>({title:m.label,value:m.name}))});f.client||(r.break(),process.exit(1)),o=f.client;}let n=_i.parse({client:o,cwd:i}),a=s("Configuring MCP server...").start(),s$1=await Li(n);a.succeed("Configuring MCP server.");let c=await h(n.cwd);if(c)await _([],sr,c,{silent:!1});else {let f=await a$1(n.cwd),m=f==="npm"?"install":"add",d=f==="npm"?"--save-dev":"-D",u=s("Installing dependencies...").start();await execa(f,[m,d,...sr],{cwd:n.cwd}),u.succeed("Installing dependencies.");}r.break(),r.success(`Configuration saved to ${s$1}.`),r.break();}catch(r){Q(r);}});var Di=(t,e)=>e;async function Li(t){let{client:e,cwd:r}=t,i=Ee.find(c=>c.name===e);if(!i)throw new Error(`Unknown client: ${e}. Available clients: ${Ee.map(c=>c.name).join(", ")}`);let o=D__default.join(r,i.configPath),n={};try{let c=await promises.readFile(o,"utf-8");n=JSON.parse(c);}catch{}let a=ui(n,i.config,{arrayMerge:Di}),s=D__default.dirname(o);return await K.ensureDir(s),await promises.writeFile(o,JSON.stringify(a,null,2)+`
`,"utf-8"),i.configPath}async function cr(t){if(!t.resolvedPaths.ui)throw new Error("We could not find a valid `ui` path in your `components.json` file. Please ensure you have a valid `ui` path in your `components.json` file.");let e=t.resolvedPaths.ui,[r$1,i]=await Promise.all([Wi("**/*.{js,ts,jsx,tsx}",{cwd:e}),$()]);if(Object.keys(i).length===0)throw new Error("Something went wrong fetching the registry icons.");let o=Object.entries(G).map(([m,d])=>({title:d.name,value:m})),n=await Ge([{type:"select",name:"sourceLibrary",message:`Which icon library would you like to ${c.info("migrate from")}?`,choices:o},{type:"select",name:"targetLibrary",message:`Which icon library would you like to ${c.info("migrate to")}?`,choices:o}]);if(n.sourceLibrary===n.targetLibrary)throw new Error("You cannot migrate to the same icon library. Please choose a different icon library.");if(!(n.sourceLibrary in G&&n.targetLibrary in G))throw new Error("Invalid icon library. Please choose a valid icon library.");let a=G[n.sourceLibrary],s$1=G[n.targetLibrary],{confirm:c$1}=await Ge({type:"confirm",name:"confirm",initial:true,message:`We will migrate ${c.info(r$1.length)} files in ${c.info(`./${D__default.relative(t.resolvedPaths.cwd,e)}`)} from ${c.info(a.name)} to ${c.info(s$1.name)}. Continue?`});c$1||(r.info("Migration cancelled."),process.exit(0)),s$1.package&&await _([s$1.package],[],t,{silent:false});let f=s("Migrating icons...")?.start();await Promise.all(r$1.map(async m=>{f.text=`Migrating ${m}...`;let d=D__default.join(e,m),u=await promises.readFile(d,"utf-8"),g=await Gi(u,n.sourceLibrary,n.targetLibrary,i);await promises.writeFile(d,g);})),f.succeed("Migration complete.");}async function Gi(t,e,r,i){let o=G[e]?.import,n=G[r]?.import,a=await promises.mkdtemp(D__default.join(tmpdir(),"shadcn-")),s=new Project({compilerOptions:{}}),c=D__default.join(a,`shadcn-icons-${randomBytes(4).toString("hex")}.tsx`),f=s.createSourceFile(c,t,{scriptKind:ScriptKind.TSX}),m=[];for(let d of f.getImportDeclarations()??[])if(d.getModuleSpecifier()?.getText()===`"${o}"`){for(let u of d.getNamedImports()??[]){let g=u.getName(),w=Object.values(i).find(y=>y[e]===g)?.[r];!w||m.includes(w)||(m.push(w),u.remove(),f.getDescendantsOfKind(SyntaxKind.JsxSelfClosingElement).filter(y=>y.getTagNameNode()?.getText()===g).forEach(y=>y.getTagNameNode()?.replaceWithText(w)));}d.getNamedImports()?.length===0&&d.remove();}return m.length>0&&f.addImportDeclaration({moduleSpecifier:n,namedImports:m.map(d=>({name:d}))}),await f.getText()}function qi(t){return t.split("-").map(e=>e.charAt(0).toUpperCase()+e.slice(1)).join("")}function Ki(t,e,r,i){let n=t.replace(/\/\/.*$/gm,"").replace(/\/\*[\s\S]*?\*\//g,"").replace(/\s+/g," ").trim().split(",").map(a=>a.trim()).filter(Boolean);for(let a of n){let s=a.match(/^type\s+(\w+)(?:\s+as\s+(\w+))?$/),c=a.match(/^(\w+)\s+as\s+(\w+)$/);if(s){let f=s[1],m=s[2];i==="slot"&&f==="Slot"&&!m?r.push({name:"Slot",alias:"SlotPrimitive",isType:true}):r.push({name:f,alias:m,isType:true});}else if(c){let f=c[1],m=c[2];i==="slot"&&f==="Slot"&&m==="Slot"?r.push({name:"Slot",alias:"SlotPrimitive",isType:e}):r.push({name:f,alias:m,isType:e});}else i==="slot"&&a==="Slot"?r.push({name:"Slot",alias:"SlotPrimitive",isType:e}):r.push({name:a,isType:e});}}async function lr(t,e={}){if(!t.resolvedPaths.ui)throw new Error("We could not find a valid `ui` path in your `components.json` file. Please ensure you have a valid `ui` path in your `components.json` file.");let r$1=t.resolvedPaths.ui,i=await Wi("**/*.{js,ts,jsx,tsx}",{cwd:r$1});if(!e.yes){let{confirm:s}=await Ge({type:"confirm",name:"confirm",initial:true,message:`We will migrate ${c.info(i.length)} files in ${c.info(`./${D__default.relative(t.resolvedPaths.cwd,r$1)}`)} to ${c.info("radix-ui")}. Continue?`});s||(r.info("Migration cancelled."),process.exit(0));}let o=s("Migrating imports...")?.start(),n$1=new Set;await Promise.all(i.map(async s=>{o.text=`Migrating ${s}...`;let c=D__default.join(r$1,s),f=await promises.readFile(c,"utf-8"),{content:m,replacedPackages:d}=await Hi(f);d.forEach(u=>n$1.add(u)),await promises.writeFile(c,m);})),o.succeed("Migrating imports.");let a=s("Updating package.json...")?.start();try{let s=n(t.resolvedPaths.cwd,!1);if(!s){a.fail("Could not read package.json"),r.warn("Could not update package.json. You may need to manually replace @radix-ui/react-* packages with radix-ui");return}let c=Array.from(n$1),f=["dependencies","devDependencies"];for(let m of f)if(s[m])for(let d of c)s[m][d]&&delete s[m][d];if(c.length>0){s.dependencies||(s.dependencies={}),s.dependencies["radix-ui"]="latest";let m=D__default.join(t.resolvedPaths.cwd,"package.json");await promises.writeFile(m,JSON.stringify(s,null,2)+`
`),a.succeed("Updated package.json."),await _(["radix-ui"],[],t,{silent:!1});}else a.succeed("No packages found in source files.");}catch{a.fail("Failed to update package.json"),r.warn("You may need to manually replace @radix-ui/react-* packages with radix-ui");}}async function Hi(t){let e=/import\s+(?:(type)\s+)?(?:\*\s+as\s+(\w+)|{([^}]+)})\s+from\s+(["'])@radix-ui\/react-([^"']+)\4(;?)/g,r=[],i=[],o=[],n='"',a=false,s=t,c;for(;(c=e.exec(t))!==null;){let[w,y,C,S,V,E,G]=c;if(E==="icons"||E.startsWith("icons/"))continue;i.push(w),i.length===1&&(n=V,a=G===";"),o.push(`@radix-ui/react-${E}`);let j=!!y;if(C){let Oe=qi(E);r.push({name:Oe,alias:C,isType:j});}else S&&Ki(S,j,r,E);}if(r.length===0)return {content:t,replacedPackages:[]};let f=r.filter((w,y,C)=>y===C.findIndex(S=>S.name===w.name&&S.alias===w.alias&&S.isType===w.isType)),d=`import { ${f.map(w=>{let y=w.isType?"type ":"";return w.alias?`${y}${w.name} as ${w.alias}`:`${y}${w.name}`}).join(", ")} } from ${n}radix-ui${n}${a?";":""}`;s=i.reduce((w,y,C)=>w.replace(y,C===0?d:""),s),s=s.replace(/\n\s*\n\s*\n/g,`

`),f.some(w=>w.name==="Slot"&&w.alias==="SlotPrimitive")&&(s=s.split(`
`).map(C=>{if(C.trim().startsWith("import "))return C;let S=C;return S=S.replace(/\b(asChild\s*\?\s*)Slot(\s*:)/g,"$1__SLOT_PLACEHOLDER__$2"),S=S.replace(/\bReact\.ComponentProps<typeof\s+Slot>/g,"React.ComponentProps<typeof __SLOT_PLACEHOLDER__>"),S=S.replace(/\bComponentProps<typeof\s+Slot>/g,"ComponentProps<typeof __SLOT_PLACEHOLDER__>"),S=S.replace(/(<\/?)Slot(\s*\/?>)/g,"$1__SLOT_PLACEHOLDER__$2"),S=S.replace(/\bSlot\b/g,(V,E,G)=>{let j=G.substring(0,E),Oe=(j.match(/"/g)||[]).length,Ir=(j.match(/'/g)||[]).length;return Oe%2!==0||Ir%2!==0?V:"__SLOT_PLACEHOLDER__"}),S=S.replace(/__SLOT_PLACEHOLDER__/g,"SlotPrimitive.Slot"),S}).join(`
`));let g=Array.from(new Set(o));return {content:s,replacedPackages:g}}async function fr(t){let e={};if(!K.existsSync(t.cwd)||!K.existsSync(D__default.resolve(t.cwd,"package.json")))return e["1"]=true,{errors:e,config:null};if(!K.existsSync(D__default.resolve(t.cwd,"components.json")))return e["3"]=true,{errors:e,config:null};try{let r=await h(t.cwd);return {errors:e,config:r}}catch{r.break(),r.error(`An invalid ${c.info("components.json")} file was found at ${c.info(t.cwd)}.
Before you can run a migration, you must create a valid ${c.info("components.json")} file by running the ${c.info("init")} command.`),r.error(`Learn more at ${c.info("https://ui.shadcn.com/docs/components-json")}.`),r.break(),process.exit(1);}}var pr=[{name:"icons",description:"migrate your ui components to a different icon library."},{name:"radix",description:"migrate to radix-ui."}],Zi=z.object({cwd:z.string(),list:z.boolean(),yes:z.boolean(),migration:z.string().refine(t=>t&&pr.some(e=>e.name===t),{message:"You must specify a valid migration. Run `shadcn migrate --list` to see available migrations."}).optional()}),dr=new Command().name("migrate").description("run a migration.").argument("[migration]","the migration to run.").option("-c, --cwd <cwd>","the working directory. defaults to the current directory.",process.cwd()).option("-l, --list","list all migrations.",false).option("-y, --yes","skip confirmation prompt.",false).action(async(t,e)=>{try{let r$1=Zi.parse({cwd:D__default.resolve(e.cwd),migration:t,list:e.list,yes:e.yes});if(r$1.list||!r$1.migration){r.info("Available migrations:");for(let n of pr)r.info(`- ${n.name}: ${n.description}`);return}if(!r$1.migration)throw new Error("You must specify a migration. Run `shadcn migrate --list` to see available migrations.");let{errors:i,config:o}=await fr(r$1);if(i["1"]||i["3"])throw new Error("No `components.json` file found. Ensure you are at the root of your project.");if(!o)throw new Error("Something went wrong reading your `components.json` file. Please ensure you have a valid `components.json` file.");r$1.migration==="icons"&&await cr(o),r$1.migration==="radix"&&await lr(o,{yes:r$1.yes});}catch(r$1){r.break(),Q(r$1);}});async function ur(t){let e={},r$1={cwd:t.cwd,registryFile:D__default.resolve(t.cwd,t.registryFile),outputDir:D__default.resolve(t.cwd,t.outputDir)};if(!K.existsSync(r$1.registryFile))return e["13"]=true,{errors:e,resolvePaths:null,config:null};if(!K.existsSync(D__default.resolve(t.cwd,"components.json")))return e["3"]=true,{errors:e,resolvePaths:null,config:null};await K.mkdir(r$1.outputDir,{recursive:true});try{let i=await h(t.cwd);return {errors:e,config:i,resolvePaths:r$1}}catch{r.break(),r.error(`An invalid ${c.info("components.json")} file was found at ${c.info(t.cwd)}.
Before you can build the registry, you must create a valid ${c.info("components.json")} file by running the ${c.info("init")} command.`),r.break(),process.exit(1);}}var to=z.object({cwd:z.string(),registryFile:z.string(),outputDir:z.string(),verbose:z.boolean().optional().default(false)}),gr=new Command().name("registry:build").description("builds the registry [EXPERIMENTAL]").argument("[registry]","path to registry.json file","./registry.json").option("-o, --output <path>","destination directory for json files","./public/r").option("-c, --cwd <cwd>","the working directory. defaults to the current directory.",process.cwd()).option("-v, --verbose","verbose output").action(async(t,e)=>{await ro({cwd:D.resolve(e.cwd),registryFile:t,outputDir:e.output,verbose:e.verbose});});async function ro(t){try{let e=to.parse(t),[{errors:r$1,resolvePaths:i,config:o$1},n]=await Promise.all([ur(e),o(e.cwd)]);(r$1["3"]||!o$1||!n)&&(r.error(`A ${c.info("components.json")} file is required to build the registry. Run ${c.info("shadcn init")} to create one.`),r.break(),process.exit(1)),(r$1["13"]||!i)&&(r.error(`We could not find a registry file at ${c.info(D.resolve(e.cwd,e.registryFile))}.`),r.break(),process.exit(1));let a=await L.readFile(i.registryFile,"utf-8"),s$1=h$1.safeParse(JSON.parse(a));s$1.success||(r.error(`Invalid registry file found at ${c.info(i.registryFile)}.`),r.break(),process.exit(1));let c$1=s("Building registry..."),f=await io(s$1.data,o$1,n);for(let m of f.items)m.files=m.files?.filter((d,u,g)=>u===g.findIndex(w=>w.path===d.path)),m.dependencies&&(m.dependencies=m.dependencies.filter((d,u,g)=>u===g.findIndex(w=>w===d)));for(let m of f.items){if(!m.files)continue;c$1.start(`Building ${m.name}...`),m.$schema="https://ui.shadcn.com/schema/registry-item.json";for(let u of m.files){let g=D.resolve(i.cwd,u.path);try{if(!(await L.stat(g)).isFile())continue;u.content=await L.readFile(g,"utf-8");}catch(w){console.error("Error reading file in registry build:",g,w);continue}}let d=g$1.safeParse(m);if(!d.success){r.error(`Invalid registry item found for ${c.info(m.name)}.`);continue}await L.writeFile(D.resolve(i.outputDir,`${d.data.name}.json`),JSON.stringify(d.data,null,2));}if(await L.copyFile(i.registryFile,D.resolve(i.outputDir,"registry.json")),c$1.succeed("Building registry."),e.verbose){s(`The registry has ${c.info(f.items.length.toString())} items:`).succeed();for(let m of f.items){r.log(`  - ${m.name} (${c.info(m.type)})`);for(let d of m.files??[])r.log(`    - ${d.path}`);}}}catch(e){r.break(),Q(e);}}async function io(t,e,r){for(let i of t.items)if(i.files?.length)for(let o of i.files){let n=await J(o.path,e,r);n.files=n.files?.filter(a=>a.path!==o.path),n.files&&i.files.push(...n.files),n.dependencies&&(i.dependencies=i.dependencies?i.dependencies.concat(n.dependencies):n.dependencies);}return t}var hr=new Command().name("registry:mcp").description("starts the registry MCP server [DEPRECATED]").option("-c, --cwd <cwd>","the working directory. defaults to the current directory.",process.cwd()).action(async()=>{r.warn(`The ${c.info("shadcn registry:mcp")} command is deprecated. Use the ${c.info("shadcn mcp")} command instead.`),r.break();});var so=z.object({cwd:z.string(),query:z.string().optional(),limit:z.number().optional(),offset:z.number().optional()}),br=new Command().name("search").alias("list").description("search items from registries").argument("<registries...>","the registry names or urls to search items from. Names must be prefixed with @.").option("-c, --cwd <cwd>","the working directory. defaults to the current directory.",process.cwd()).option("-q, --query <query>","query string").option("-l, --limit <number>","maximum number of items to display per registry","100").option("-o, --offset <number>","number of items to skip","0").action(async(t,e)=>{try{let r=so.parse({cwd:D__default.resolve(e.cwd),query:e.query,limit:e.limit?parseInt(e.limit,10):void 0,offset:e.offset?parseInt(e.offset,10):void 0});await F(r.cwd);let i=m({style:"new-york",resolvedPaths:{cwd:r.cwd}}),o=L$1(i),n=D__default.resolve(r.cwd,"components.json");if(K.existsSync(n)){let c=await K.readJson(n),f=p.partial().parse(c);o=L$1({...i,...f});}let a=o;try{let c=await h(r.cwd);c&&(a=L$1(c));}catch{}N(t,a);let s=await fa(t,{query:r.query,limit:r.limit,offset:r.offset,config:a});console.log(JSON.stringify(s,null,2)),process.exit(0);}catch(r){Q(r);}finally{M();}});var co=z.object({cwd:z.string()}),Rr=new Command().name("view").description("view items from the registry").argument("<items...>","the item names or URLs to view").option("-c, --cwd <cwd>","the working directory. defaults to the current directory.",process.cwd()).action(async(t,e)=>{try{let r=co.parse({cwd:D__default.resolve(e.cwd)});await F(r.cwd);let i=L$1({}),o=D__default.resolve(r.cwd,"components.json");if(K.existsSync(o)){let s=await K.readJson(o),c=p.partial().parse(s);i=L$1(c);}let n=i;try{let s=await h(r.cwd);s&&(n=L$1(s));}catch{}N(t,n);let a=await W(t,{config:n});console.log(JSON.stringify(a,null,2)),process.exit(0);}catch(r){Q(r);}finally{M();}});var Cr={version:"3.1.0"};process.on("SIGINT",()=>process.exit(0));process.on("SIGTERM",()=>process.exit(0));async function fo(){let t=new Command().name("shadcn").description("add items from registries to your project").version(Cr.version,"-v, --version","display the version number");t.addCommand(Ut).addCommand(Ht).addCommand(rr).addCommand(Rr).addCommand(br).addCommand(dr).addCommand(ir).addCommand(er).addCommand(Qe),t.addCommand(gr).addCommand(hr),t.parse();}fo();//# sourceMappingURL=index.js.map
//# sourceMappingURL=index.js.map